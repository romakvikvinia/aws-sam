AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Kinesis Firehose

Resources:
  ## Raw Data Bucket
  RawDataBucket:
    Type: AWS::S3::Bucket
  ProcessedDataBucket:
    Type: AWS::S3::Bucket

  # kinesis Firehose
  Firehose:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        BucketARN: !GetAtt ProcessedDataBucket.Arn
        CompressionFormat: GZIP
        RoleARN: !GetAtt FirehoseAccessRole.Arn
        ProcessingConfiguration:
          Enabled: true
          Processors: #
            - Type: Lambda
              Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt ProcessFunction.Arn
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 1
        S3BackupConfiguration:
          BucketARN: !GetAtt RawDataBucket.Arn
          CompressionFormat: GZIP
          RoleARN: !GetAtt FirehoseAccessRole.Arn
          BufferingHints:
            IntervalInSeconds: 60
            SizeInMBs: 1
  # Kinesis Data Analytics
  KinesisAnalyticsApp:
    Type: AWS::KinesisAnalytics::Application
    Properties:
      ApplicationCode: >
        CREATE OR REPLACE STREAM "LINK_STREAM" ("resourcePath" varchar(16), link_count INTEGER);
        CREATE OR REPLACE PUMP "STREAM_PUMP" AS INSERT INTO "LINK_STREAM"
        SELECT STREAM "resourcePath", COUNT(*) AS link_count
            FROM "SESSIONS_STREAM_001"
            GROUP BY "resourcePath", STEP("SESSIONS_STREAM_001".ROWTIME BY INTERVAL '10' SECOND);
      Inputs:
        - InputSchema:
            RecordColumns:
              - Name: requestId
                Mapping: $.requestId
                SqlType: bigint
              - Name: ip
                Mapping: $.ip
                SqlType: varchar(16)
              - Name: status
                Mapping: $.status
                SqlType: varchar(8)
              - Name: resourcePath
                Mapping: $.resourcePath
                SqlType: varchar(16)
            RecordFormat:
              RecordFormatType: JSON
          KinesisFirehoseInput:
            ResourceARN: !GetAtt Firehose.Arn
            RoleARN: !GetAtt KinesisAnalyticsAccessRole.Arn
          NamePrefix: SESSION_STREAM
  KinesisAnalyticsOutput:
    Type: AWS::KinesisAnalytics::ApplicationOutput
    Properties:
      ApplicationName: !Ref KinesisAnalyticsApp
      Output:
        DestinationSchema:
          RecordFormatType: JSON
        LambdaOutput:
          ResourceARN: !GetAtt CounterFunction.Arn
          RoleARN: !GetAtt KinesisAnalyticsAccessRole.Arn
        Name: LINK_STREAM # name of the stream  created in ApplicationCode at KinesisAnalyticsApp

  # Lambda handler
  ProcessFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 180
      Runtime: nodejs16.x
      CodeUri: src/
      Handler: app.processHandler
      Policies:
        - DynamoDBCrudPolicy: { TableName: !Ref DynamoTable }
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoTable
  # Counter Function
  CounterFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 180
      CodeUri: src/
      Handler: count.handler
      Runtime: nodejs16.x
      Policies:
        - DynamoDBCrudPolicy: { TableName: !Ref CountTable }
      Environment:
        Variables:
          TABLE_NAME: !Ref CountTable
  # DynamoDB
  DynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      TimeToLiveSpecification:
        AttributeName: ttl # Gives us feature that removes items some amount of time lately
        Enabled: true
  # Link Count Table
  CountTable:
    Type: AWS::Serverless::SimpleTable

  # Access role for Firehose
  FirehoseAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "firehose.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: S3WritePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Action:
                - s3:PutObject
              Effect: Allow
              Resource:
                - !GetAtt RawDataBucket.Arn
                - !Sub
                  - ${Arn}/*
                  - { Arn: !GetAtt RawDataBucket.Arn }
                - !GetAtt ProcessedDataBucket.Arn
                - !Sub
                  - ${Arn}/*
                  - { Arn: !GetAtt ProcessedDataBucket.Arn }
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Action:
                - lambda:InvokeFunction
              Effect: Allow
              Resource:
                - !GetAtt ProcessFunction.Arn

  # Access role for Kinesis Data Analytics
  KinesisAnalyticsAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "kinesisanalytics.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: KinesisAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Action:
                - firehose:DescribeDeliveryStream
                - firehose:Get*
                - kinesis:Describe*
                - kinesis:Get*
                - kinesis:List*
                - kinesis:Put*
              Effect: Allow
              Resource:
                - !GetAtt Firehose.Arn
        - PolicyName: LambdaAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Action:
                - lambda:InvokeFunction
                - lambda:Get*
              Effect: Allow
              Resource:
                - !GetAtt CounterFunction.Arn
                - !Sub
                  - ${Func}:$LATEST
                  - { Func: !GetAtt CounterFunction.Arn }
